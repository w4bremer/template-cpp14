# This workflow will ensures that a set of different feature configuration builds on linux

name: Build Feature Configurations

on:
  pull_request:
    branches: [main]

env:
  go_version: "1.21.x"

jobs:
  cmake_script:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Simple Conf CMake script", short: "simple", features: "api,core,stubs,examples" }
          - { name: "Monitor Conf CMake script", short: "monitor", features: "api,core,stubs,monitor,examples" }
          - { name: "OLink Conf CMake script", short: "olink", features: "api,core,stubs,olink,examples_olink" }
          - { name: "MQTT Conf CMake script", short: "mqtt", features: "api,core,stubs,mqtt,examples_mqtt" }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-go@v3
        with:
          go-version: ${{env.go_version}}

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ env.go_version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ env.go_version }}-

      - name: Install catch2
        run: git clone --branch v2.13.8 --depth 1 https://github.com/catchorg/Catch2.git && cd Catch2 && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - name: Install trompeloeil
        if: ${{ matrix.config.short == 'olink'}}
        run: git clone --branch v46 --depth 1 https://github.com/rollbear/trompeloeil.git && cd trompeloeil && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - name: Install nlohmann and OpenSSL using apt-get
        run: sudo apt-get install -y nlohmann-json3-dev openssl libssl-dev

      - name: Install poco using apt-get
        if: ${{ matrix.config.short == 'monitor' || matrix.config.short == 'olink' }}
        run: sudo apt-get install -y libpoco-dev

      - name: Install objectlink-core-cpp
        if: ${{ matrix.config.short == 'olink'}}
        run: git clone --branch v0.2.8 --depth 1 https://github.com/apigear-io/objectlink-core-cpp.git && cd objectlink-core-cpp && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - name: Install paho.mqtt.c
        if: ${{ matrix.config.short == 'mqtt'}}
        run: git clone --branch v1.3.12 --depth 1 https://github.com/eclipse/paho.mqtt.c.git && cd paho.mqtt.c && cmake -Bbuild -H. -DPAHO_BUILD_SHARED=OFF -DPAHO_BUILD_STATIC=ON -DPAHO_WITH_SSL=ON -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - run: go run main.go install
      - name: generate ${{ matrix.config.short }} feature set
        run: bin/apigear g x -f "${{ matrix.config.features }}" -t . -o test -i apigear/testbed.simple.module.yaml,apigear/testbed.struct.module.yaml
      - name: Run cmake on Linux
        working-directory: test
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: bash scripts/test_cmake.sh

  cmake_list:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Simple Conf CMake Lists file", short: "simple", features: "api,core,stubs,examples" }
          - { name: "Monitor Conf CMake Lists file", short: "monitor", features: "api,core,stubs,monitor,examples" }
          - { name: "OLink Conf CMake Lists file", short: "olink", features: "api,core,stubs,olink,examples_olink" }
          - { name: "MQTT Conf CMake Lists file", short: "mqtt", features: "api,core,stubs,mqtt,examples_mqtt" }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-go@v3
        with:
          go-version: ${{env.go_version}}

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ env.go_version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ env.go_version }}-

      - name: Install catch2
        run: git clone --branch v2.13.8 --depth 1 https://github.com/catchorg/Catch2.git && cd Catch2 && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - name: Install trompeloeil
        if: ${{ matrix.config.short == 'olink'}}
        run: git clone --branch v46 --depth 1 https://github.com/rollbear/trompeloeil.git && cd trompeloeil && cmake -Bbuild -H. -DPAHO_BUILD_SHARED=OFF -DPAHO_BUILD_STATIC=ON -DPAHO_WITH_SSL=ON -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - name: Install nlohmann and OpenSSL using apt-get
        run: sudo apt-get install -y nlohmann-json3-dev openssl  libssl-dev

      - name: Install poco using apt-get
        if: ${{ matrix.config.short == 'monitor' || matrix.config.short == 'olink' }}
        run: sudo apt-get install -y libpoco-dev

      - name: Install objectlink-core-cpp
        if: ${{ matrix.config.short == 'olink'}}
        run: git clone --branch v0.2.8 --depth 1 https://github.com/apigear-io/objectlink-core-cpp.git && cd objectlink-core-cpp && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - name: Install paho.mqtt.c
        if: ${{ matrix.config.short == 'mqtt'}}
        run: git clone --branch v1.3.12 --depth 1 https://github.com/eclipse/paho.mqtt.c.git && cd paho.mqtt.c && cmake -Bbuild -H. -DPAHO_BUILD_SHARED=OFF -DPAHO_BUILD_STATIC=ON -DPAHO_WITH_SSL=ON -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install

      - run: go run main.go install
      - name: generate ${{ matrix.config.short }} feature set
        run: bin/apigear g x -f "${{ matrix.config.features }}" -t . -o test -i apigear/testbed.simple.module.yaml,apigear/testbed.struct.module.yaml
      - name: Run cmake on Linux
        working-directory: test
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: cmake -DCMAKE_BUILD_TYPE=Release -Bbuild -DCMAKE_INSTALL_PREFIX=tmp -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/deps -DBUILD_TESTING=ON && cmake --build build/ && cmake --build build/ --target test && cmake --build build/ --target install

  conan_build:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Simple Conf Conan", short: "simple", features: "api,core,stubs,examples,conan" }
          - { name: "Monitor Conf Conan", short: "monitor", features: "api,core,stubs,monitor,examples,conan" }
          - { name: "OLink Conf Conan", short: "olink", features: "api,core,stubs,olink,examples_olink,conan" }
          - { name: "MQTT Conf Conan", short: "mqtt", features: "api,core,stubs,mqtt,examples_mqtt,conan" }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-go@v3
        with:
          go-version: ${{env.go_version}}

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ env.go_version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ env.go_version }}-

      - name: Cache conan on Linux
        uses: actions/cache@v3
        with:
          path: |
            ~/.conan2/p
          key: ubuntu-latest-conan-cache-${{ hashFiles('goldenmaster/**/conanfile.py', 'goldenmaster/**/conanfile.txt') }}
          restore-keys: |
            ubuntu-latest-conan-cache
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: "pip"
          cache-dependency-path: ".github/workflows/conan-requirements.txt"
      - name: Install Conan
        run: pip install -r .github/workflows/conan-requirements.txt
      - name: Create default profile
        run: conan profile detect
      # - name: Set C++11 on Linux
      #   run: conan profile update settings.compiler.libcxx=libstdc++11 default


      - name: Install CMake
        run: conan install --tool-requires=cmake/3.24.4 -g=VirtualRunEnv

      - run: go run main.go install
      - name: generate ${{ matrix.config.short }} feature set
        run: bin/apigear g x -f "${{ matrix.config.features }}" -t . -o test -i apigear/testbed.simple.module.yaml
      - name: Run conan build Linux
        working-directory: test
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: chmod +x ./scripts/test_conan.sh && ./scripts/test_conan.sh
