# This workflow will ensure that all changes to the goldenmaster are tested

name: Technology Template Build Test

on:
  pull_request:
    paths:
      - 'goldenmaster/**'
      - '.github/workflows/**'
    branches: [main]

jobs:
  conan_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Conan Windows Latest MSVC", os: windows-latest }
          - { name: "Conan Ubuntu Latest GCC", os: ubuntu-latest }
          - { name: "Conan macOS Latest Clang", os: macos-latest }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache conan on Windows
        uses: actions/cache@v3
        if: ${{ matrix.config.os == 'windows-latest'}}
        with:
          path: |
            ~\.conan\data
          key: ${{ matrix.config.os }}-conan-cache-${{ hashFiles('goldenmaster/**/conanfile.py', 'goldenmaster/**/conanfile.txt') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan-cache
      - name: Cache conan on Linux/macOS
        uses: actions/cache@v3
        if: ${{ matrix.config.os != 'windows-latest'}}
        with:
          path: |
            ~/.conan2/p
          key: ${{ matrix.config.os }}-conan-cache-${{ hashFiles('goldenmaster/**/conanfile.py', 'goldenmaster/**/conanfile.txt') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan-cache
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: "pip"
          cache-dependency-path: ".github/workflows/conan-requirements.txt"
      - name: Install Conan
        run: pip install -r .github/workflows/conan-requirements.txt
      - name: Create default profile
        run: conan profile detect
      # - name: Set C++11 on Linux
      #   if: ${{ matrix.config.os == 'ubuntu-latest'}}
      #   run: conan profile update settings.compiler.libcxx=libstdc++11 default
      # - name: Set Debug and runtime on Windows
      #   if: ${{ matrix.config.os == 'windows-latest'}}
      #   run: |
      #     conan profile update settings.compiler.runtime=MDd default
      #     conan profile update settings.build_type=Debug default
      - name: Install CMake
        run: conan install --tool-requires=cmake/3.24.4 -g=VirtualRunEnv
      - name: Run conan build Linux/macOS
        if: ${{ matrix.config.os != 'windows-latest'}}
        working-directory: goldenmaster
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: chmod +x ./scripts/test_conan.sh && ./scripts/test_conan.sh
      - name: Run conan build Windows
        if: ${{ matrix.config.os == 'windows-latest'}}
        working-directory: goldenmaster
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: cmd.exe /c  "scripts\test_conan.bat"

  cmake_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "CMake Windows Latest MSVC", os: windows-latest }
          - { name: "CMake Ubuntu Latest GCC", os: ubuntu-latest }
          - { name: "CMake macOS Latest Clang", os: macos-latest }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache conan on Windows
        uses: actions/cache@v3
        if: ${{ matrix.config.os == 'windows-latest'}}
        with:
          path: |
            ~\.conan\data
          key: ${{ matrix.config.os }}-conan4cmake-cache-${{ hashFiles('.github/workflows/ci_build_test.yml') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan4cmake-cache
      - name: Cache conan on macOS
        uses: actions/cache@v3
        if: ${{ matrix.config.os == 'macos-latest'}}
        with:
          path: |
            ~/.conan2/p
          key: ${{ matrix.config.os }}-conan4cmake-cache-${{ hashFiles('.github/workflows/ci_build_test.yml') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan4cmake-cache
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
          cache: "pip"
          cache-dependency-path: ".github/workflows/conan-requirements.txt"
      - name: Install Conan
        run: pip3 install -r .github/workflows/conan-requirements.txt
      - name: Create default profile
        run: conan profile detect
      # - name: Set Debug and runtime on Windows
      #   if: ${{ matrix.config.os == 'windows-latest'}}
      #   run: |
      #     conan profile update settings.compiler.runtime=MDd default
      #     conan profile update settings.build_type=Debug default
      - name: create dependencies folder
        if: ${{ matrix.config.os != 'ubuntu-latest'}}
        run: mkdir -p deps
      - name: Install poco using conan
        if: ${{ matrix.config.os != 'ubuntu-latest'}}
        run: |
          cd deps && conan install --requires=poco/1.12.4 --build missing -o poco/*:shared=False -o poco/*:enable_data_mysql=False -o openssl/*:shared=False -o poco/*:enable_activerecord=False -o poco/*:enable_apacheconnector=False -o poco/*:enable_cppparser=False -o poco/*:enable_crypto=True -o poco/*:enable_data=False -o poco/*:enable_data_odbc=False -o poco/*:enable_data_postgresql=False -o poco/*:enable_data_sqlite=False -o poco/*:enable_encodings=False -o poco/*:enable_json=False -o poco/*:enable_jwt=False -o poco/*:enable_mongodb=False -o poco/*:enable_net=True -o poco/*:enable_netssl=True -o poco/*:enable_pagecompiler=False -o poco/*:enable_pagecompiler_file2page=False -o poco/*:enable_pdf=False -o poco/*:enable_pocodoc=False -o poco/*:enable_redis=False -o poco/*:enable_sevenzip=False -o poco/*:enable_util=True -o poco/*:enable_xml=False -o poco/*:enable_zip=False --generator CMakeDeps --generator VirtualBuildEnv
      - name: Install paho.mqtt.c using conan
        if: ${{ matrix.config.os != 'ubuntu-latest'}}
        run: |
          cd deps && conan install --requires=paho-mqtt-c/1.3.12@ --build missing -o paho-mqtt-c/*:shared=False --generator CMakeDeps --generator VirtualBuildEnv
      - name: Install poco using apt-get
        if: ${{ matrix.config.os == 'ubuntu-latest'}}
        run: sudo apt-get install -y cmake libpoco-dev nlohmann-json3-dev
      - name: Install paho.mqtt.c
        if: ${{ matrix.config.os == 'ubuntu-latest'}}
        run: git clone --branch v1.3.12 --depth 1 https://github.com/eclipse/paho.mqtt.c.git && cd paho.mqtt.c && cmake -Bbuild -H. -DPAHO_BUILD_SHARED=OFF -DPAHO_BUILD_STATIC=ON -DPAHO_WITH_SSL=ON -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install
      - name: Install catch2
        if: ${{ matrix.config.os == 'ubuntu-latest'}}
        run: git clone --branch v2.13.8 --depth 1 https://github.com/catchorg/Catch2.git && cd Catch2 && cmake -Bbuild -H. -DBUILD_TESTING=OFF && sudo cmake --build build/ --target install
      - name: Run cmake on Linux/Mac
        if: ${{ matrix.config.os != 'windows-latest'}}
        working-directory: goldenmaster
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX=tmp -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/deps -DTEST_FETCH_DEPS=ON -DBUILD_TESTING=ON && cmake --build build/ && cmake --build build/ --target test && cmake --build build/ --target install
      - name: Update path env on Windows for testing
        if: ${{ matrix.config.os == 'windows-latest'}}
        run: echo "$GITHUB_WORKSPACE/goldenmaster/build/bin/Debug/" >> $GITHUB_PATH
      - name: Run cmake on Windows
        if: ${{ matrix.config.os == 'windows-latest'}}
        working-directory: goldenmaster
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: |
          $Env:GITHUB_WORKSPACE_UNIX = "${{ github.workspace }}" -replace "\\","/"
          cmake -Bbuild -DCMAKE_INSTALL_PREFIX=tmp -DCMAKE_PREFIX_PATH="$Env:GITHUB_WORKSPACE_UNIX/deps" -DTEST_FETCH_DEPS=ON -DBUILD_TESTING=ON && cmake --build build/ && cmake --build build/ --target RUN_TESTS && cmake --build build/ --target install

  cmake_release_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "CMake Release Windows Latest MSVC", os: windows-latest }
          - { name: "CMake Release Ubuntu Latest GCC", os: ubuntu-latest }
          - { name: "CMake Release macOS Latest Clang", os: macos-latest }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Cache conan on Windows
        uses: actions/cache@v3
        if: ${{ matrix.config.os == 'windows-latest'}}
        with:
          path: |
            ~\.conan\data
          key: ${{ matrix.config.os }}-conan4cmake-release-cache-${{ hashFiles('.github/workflows/ci_build_test.yml') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan4cmake-release-cache
      - name: Cache conan on Linux/macOS
        uses: actions/cache@v3
        if: ${{ matrix.config.os != 'windows-latest'}}
        with:
          path: |
            ~/.conan2/p
          key: ${{ matrix.config.os }}-conan4cmake-release-cache-${{ hashFiles('.github/workflows/ci_build_test.yml') }}
          restore-keys: |
            ${{ matrix.config.os }}-conan4cmake-release-cache
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
          cache: "pip"
          cache-dependency-path: ".github/workflows/conan-requirements.txt"
      - name: Install Conan
        run: pip3 install -r .github/workflows/conan-requirements.txt
      - name: Create release profile
        run: conan profile detect --name release
      # - name: Set Release and C++11 on Linux
      #   if: ${{ matrix.config.os == 'ubuntu-latest'}}
      #   run: |
      #       conan profile update settings.compiler.libcxx=libstdc++11 release
      #       conan profile update settings.build_type=Release release
      # - name: Set Release and runtime on Windows
      #   if: ${{ matrix.config.os == 'windows-latest'}}
      #   run: |
      #     conan profile update settings.compiler.runtime=MD release
      #     conan profile update settings.build_type=Release release
      - run: mkdir -p deps
      - name: Install poco using conan
        run: |
          cd deps && conan install --profile:host=release --requires=poco/1.12.4 --build missing -o poco/*:shared=False -o poco/*:enable_data_mysql=False -o openssl:shared=False -o poco/*:enable_activerecord=False -o poco/*:enable_apacheconnector=False -o poco/*:enable_cppparser=False -o poco/*:enable_crypto=True -o poco/*:enable_data=False -o poco/*:enable_data_odbc=False -o poco/*:enable_data_postgresql=False -o poco/*:enable_data_sqlite=False -o poco/*:enable_encodings=False -o poco/*:enable_json=False -o poco/*:enable_jwt=False -o poco/*:enable_mongodb=False -o poco/*:enable_net=True -o poco/*:enable_netssl=True -o poco/*:enable_pagecompiler=False -o poco/*:enable_pagecompiler_file2page=False -o poco/*:enable_pdf=False -o poco/*:enable_pocodoc=False -o poco/*:enable_redis=False -o poco/*:enable_sevenzip=False -o poco/*:enable_util=True -o poco/*:enable_xml=False -o poco/*:enable_zip=False --generator CMakeDeps --generator VirtualBuildEnv
      - name: Install paho.mqtt.c using conan
        run: |
          cd deps && conan install --profile:host=release --requires=paho-mqtt-c/1.3.12 --build missing -o paho-mqtt-c/*:shared=False --generator CMakeDeps --generator VirtualBuildEnv
      - name: Run cmake on Linux/Mac
        if: ${{ matrix.config.os != 'windows-latest'}}
        working-directory: goldenmaster
        run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX=tmp -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/deps -DCMAKE_BUILD_TYPE=Release -DTEST_FETCH_DEPS=ON && cmake --build build/ --config Release && cmake --build build/ --target install --config Release
      - name: Update path env on Windows for testing
        if: ${{ matrix.config.os == 'windows-latest'}}
        run: echo "$GITHUB_WORKSPACE/goldenmaster/build/bin/Debug/" >> $GITHUB_PATH
      - name: Run cmake on Windows
        if: ${{ matrix.config.os == 'windows-latest'}}
        working-directory: goldenmaster
        run: |
          $Env:GITHUB_WORKSPACE_UNIX = "${{ github.workspace }}" -replace "\\","/"
          cmake -Bbuild -DCMAKE_INSTALL_PREFIX=tmp -DCMAKE_PREFIX_PATH="$Env:GITHUB_WORKSPACE_UNIX/deps" -DCMAKE_BUILD_TYPE=Release -DTEST_FETCH_DEPS=ON && cmake --build build/ --config Release && cmake --build build/ --target install --config Release
      - name: Archive goldenmaster release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: goldenmaster-install-artifacts-${{ matrix.config.os }}
          path: |
            goldenmaster/tmp
          retention-days: 5
